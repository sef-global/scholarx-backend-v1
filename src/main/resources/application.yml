spring:
  thymeleaf:
    cache: false
  security:
    oauth2:
      client:
        registration:
          linkedin:
            client-id: 86ku70j6ydy2u4
            client-secret: M8cwnZb1oM4iqPFh
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: r_liteprofile, r_emailaddress
            client-name: Linkedin
        provider:
          linkedin:
            authorization-uri: https://www.linkedin.com/oauth/v2/authorization
            token-uri: https://www.linkedin.com/oauth/v2/accessToken
            user-info-uri: https://api.linkedin.com/v2/me?projection=(id,localizedFirstName,localizedLastName,profilePicture(displayImage~:playableStreams))
            user-name-attribute: id
            email-address-uri: https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
  jpa:
    database: postgresql
    hibernate:
      ddl-auto: update
  datasource:
    url: jdbc:postgresql://ec2-54-211-160-34.compute-1.amazonaws.com:5432/dcb09bo9si1ups?allowPublicKeyRetrieval=true&useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: wxunfwrlrnnlkc
    password: "e4e68f54bda7e4122220a22e793ddea1c0c1753918841851fa8198632a637137"
    platform: postgres
  mail:
    host: smtp.gmail.com
    port: 587
    username: kumudithaudaya@gmail.com
    password: wkqjiouopskwjfpv
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  jmx:
    unique-names: true
server:
  servlet:
    session:
      cookie:
        max-age: 2d
      timeout: 2d
